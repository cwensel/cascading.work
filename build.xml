<?xml version="1.0"?>

<project name="cascading-work" default="build" basedir=".">

  <!-- load properties first -->
  <!--<property file="${user.home}/.${ant.project.name}.build.properties" />-->
  <property file="${basedir}/build.properties"/>

  <property file="${basedir}/version.properties"/>

  <property name="cascading.work.version" value="x.y.z"/>

  <!-- these are optional, only used if you uncomment the project.class.path filesets below -->
  <property name="hadoop.home" location="${basedir}/../hadoop"/>
  <property name="hadoop.lib" location="${hadoop.home}/lib"/>

  <!-- assumes Cascading shares the same parent directory, change if necessary -->
  <property name="cascading.home" location="${basedir}/../cascading"/>
  <property name="cascading.libs" value="${cascading.home}/lib"/>
  <property name="cascading.libs.core" value="${cascading.libs}"/>
  <property name="cascading.libs.xml" value="${cascading.libs}/xml"/>

  <condition property="cascading.path" value="${cascading.home}/build"
             else="${cascading.home}">
    <available file="${cascading.home}/build"/>
  </condition>

  <property file="${cascading.home}/version.properties"/>

  <property name="src.dir" location="${basedir}/src/java"/>
  <property name="src.test" location="${basedir}/src/test"/>

  <available file="${src.dir}" type="dir" property="main.available"/>
  <available file="${src.test}" type="dir" property="test.available"/>

  <property name="conf.dir" location="${hadoop.home}/conf"/>

  <property name="lib.dir" location="${basedir}/lib"/>

  <property name="build.dir" location="${basedir}/build/"/>
  <property name="build.classes" location="${build.dir}/classes"/>
  <property name="build.test" location="${build.dir}/test"/>

  <property name="test.results" location="${build.dir}/results"/>

  <property name="javac.debug" value="true"/>

  <property name="dist" location="dist"/>

  <path id="project.class.path">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test}"/>

    <fileset dir="${cascading.path}">
      <include name="cascading-core-*.jar"/>
      <include name="cascading-xml-*.jar"/>
      <include name="cascading-test-*.jar"/>
    </fileset>

    <fileset dir="${cascading.libs.core}">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${cascading.libs.xml}">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${hadoop.home}">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${hadoop.home}/build" erroronmissingdir="false">
      <include name="*.jar"/>
    </fileset>

    <fileset dir="${hadoop.lib}">
      <include name="**/*.jar"/>
    </fileset>

  </path>

  <target name="clean">

    <echo message="cleaning..."/>
    <delete dir="${build.dir}"/>
    <delete dir="${dist}"/>
    <delete dir="${ant.project.name}.tgz"/>

  </target>

  <target name="build">

    <echo message="building..."/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${lib.dir}"/>

    <javac srcdir="${src.dir}" destdir="${build.classes}" verbose="off" debug="${javac.debug}"
           includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <javac srcdir="${src.test}" destdir="${build.test}" verbose="off" debug="${javac.debug}" includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.test}">
      <fileset dir="${src.test}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

  </target>

  <target name="jar" depends="build" description="creates module jar">

    <jar jarfile="${build.dir}/${ant.project.name}-${cascading.memcached.version}.jar">
      <fileset dir="${build.classes}"/>
    </jar>

  </target>


  <target name="test" depends="build">
    <echo message="running all tests..."/>

    <mkdir dir="${test.results}"/>
    <mkdir dir="build/test/log"/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.cluster.enabled" value="${test.cluster.enabled}"/>
      <sysproperty key="test.build.data" value="data"/>
      <sysproperty key="hadoop.log.dir" value="build/test/log"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="project.class.path"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <test name="${testcase}" todir="${test.results}" if="testcase" haltonfailure="${test.haltonerror}"/>
      <batchtest todir="${test.results}" haltonfailure="${test.haltonerror}" unless="testcase">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <target name="dist" depends="clean" description="packages current project">

    <mkdir dir="${dist}"/>

    <copy todir="${dist}">

      <fileset dir=".">
        <include name="src/**"/>
        <include name="build.xml"/>
        <include name="README.txt"/>
      </fileset>

    </copy>

  </target>

  <target name="tar" depends="dist" description="creates an archive of current project">
    <tar destfile="${ant.project.name}.tgz"
         compression="gzip">
      <tarfileset dir="dist/" prefix="${ant.project.name}">
        <include name="**/**"/>
      </tarfileset>
    </tar>
  </target>

</project>